"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[501],{2441:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],s={sidebar_position:2},i="Mockingbird API Documentation",c={unversionedId:"mock-decorator",id:"mock-decorator",isDocsHomePage:!1,title:"Mockingbird API Documentation",description:"Here is a detailed explanation of the different options for using the Mock decorator:",source:"@site/docs/mock-decorator.md",sourceDirName:".",slug:"/mock-decorator",permalink:"/docs/mock-decorator",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/mock-decorator.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"intro",permalink:"/docs/intro"},next:{title:"Mockingbird API \ud83d\udc26",permalink:"/docs/mock-factory"}},p=[{value:"Callback",id:"callback",children:[]},{value:"Inferred Value",id:"inferred-value",children:[]},{value:"Class",id:"class",children:[]},{value:"Absolute Value",id:"absolute-value",children:[]},{value:"Enum",id:"enum",children:[]},{value:"Array of Classes",id:"array-of-classes",children:[]}],k={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mockingbird-api-documentation"},"Mockingbird API Documentation"),(0,o.kt)("p",null,"Here is a detailed explanation of the different options for using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mock")," decorator:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,o.kt)("th",{parentName:"tr",align:null},"Function"),(0,o.kt)("th",{parentName:"tr",align:null},"Will Generate"),(0,o.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#callback"},"Callback")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock(callback: (faker: Faker) => any)")),(0,o.kt)("td",{parentName:"tr",align:null},"Value from the callback invocation"),(0,o.kt)("td",{parentName:"tr",align:null},"Uses the Faker library under the hood, Faker docs are ",(0,o.kt)("a",{parentName:"td",href:"https://faker.readthedocs.io/en/master/"},"here"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#inferred-value"},"Inferred Value")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock()")),(0,o.kt)("td",{parentName:"tr",align:null},"Random value inferred from the property type"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#class"},"Class")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock(value: Class)")),(0,o.kt)("td",{parentName:"tr",align:null},"Matching class type"),(0,o.kt)("td",{parentName:"tr",align:null},"Primitive constructors can be used as well")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#absolute-value"},"Absolute Value")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock(value: string \\| boolean \\| number \\| ObjectLiteral)")),(0,o.kt)("td",{parentName:"tr",align:null},"The exact given value"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#enum"},"Enum")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock(value: { enum: object })")),(0,o.kt)("td",{parentName:"tr",align:null},"Random value from the given enum"),(0,o.kt)("td",{parentName:"tr",align:null},"The random value is not the key of the enum but the value")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#array-of-classes"},"Array of Classes")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"@Mock(options: { type: Class, count: number })")),(0,o.kt)("td",{parentName:"tr",align:null},"Array with ",(0,o.kt)("inlineCode",{parentName:"td"},"count")," items from the given ",(0,o.kt)("inlineCode",{parentName:"td"},"Class")),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Class")," interface looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export type Class<T = any> = new (...args: any[]) => T;\n")),(0,o.kt)("p",null,"and represents a 'type' of actual class (not an instance)"),(0,o.kt)("h2",{id:"callback"},"Callback"),(0,o.kt)("p",null,"The first option, probably the most common one, is to pass a callback function that uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"faker")," argument as the\nactual ",(0,o.kt)("inlineCode",{parentName:"p"},"faker")," instance."),(0,o.kt)("p",null,"So the result of the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MockFactory } from 'mockingbird-ts';\n\nclass Person {\n  @Mock(faker => faker.internet.email())\n  email: string;\n}\n\nconst person = MockFactory(Person).one();\nconsole.log(person);\n")),(0,o.kt)("p",null,"will be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  email: 'random-email@address.com'\n}\n")),(0,o.kt)("h2",{id:"inferred-value"},"Inferred Value"),(0,o.kt)("p",null,"When using the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mock")," decorator without any value will generate a random value inffered from the property type."),(0,o.kt)("p",null,"So the result of the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MockFactory } from 'mockingbird-ts';\n\nclass Person {\n  @Mock()\n  serial: string;\n\n  @Mock()\n  points: number;\n\n  @Mock()\n  isLucky: boolean;\n}\n\nconst person = MockFactory(Person).one();\nconsole.log(person);\n")),(0,o.kt)("p",null,"will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  serial: 'uirjkcmovf',\n  points: 64,\n  isLucky: true\n}\n")),(0,o.kt)("p",null,"Type ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," will generate a 10 characters random string \\\nType ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," will generate a number between ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"100")," \\\nType ",(0,o.kt)("inlineCode",{parentName:"p"},"boolean")," will of course generate ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")),(0,o.kt)("h2",{id:"class"},"Class"),(0,o.kt)("p",null,"Passing a class will generate an object with the matching keys (decorated by the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mock")," decorator)"),(0,o.kt)("p",null,"So the result of the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MockFactory } from 'mockingbird-ts';\n\nclass Dog {\n  @Mock(faker => faker.name.firstName())\n  name: string;\n}\n\nclass Person {\n  @Mock()\n  serial: string;\n\n  @Mock()\n  points: number;\n\n  @Mock(Dog)\n  dog: Dog;\n\n  @Mock()\n  isLucky: boolean;\n}\n\nconst person = MockFactory(Person).one();\nconsole.log(person);\n")),(0,o.kt)("p",null,"Will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  serial: 'uirjkcmovf',\n  points: 64,\n  dog: {\n    name: 'Bucky'\n  },\n  isLucky: true\n}\n")),(0,o.kt)("h2",{id:"absolute-value"},"Absolute Value"),(0,o.kt)("p",null,'The "Absolute Value" option is pretty strait forward, the generated value from the ',(0,o.kt)("inlineCode",{parentName:"p"},"Mock")," decorator will the exact same\nvalue that has been passed"),(0,o.kt)("p",null,"So the result of the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { MockFactory } from 'mockingbird-ts';\n\nclass Person {\n  @Mock('John')\n  serial: string;\n\n  @Mock(78)\n  points: number;\n\n  @Mock(true)\n  isLucky: boolean;\n}\n\nconst person = MockFactory(Person).one();\nconsole.log(person);\n")),(0,o.kt)("p",null,"Will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  serial: 'John',\n  points: 78,\n  isLucky: true\n}\n")),(0,o.kt)("h2",{id:"enum"},"Enum"),(0,o.kt)("p",null,"Passing an enum object to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Mock")," decorator will generate a random value from the given enum (not a key):"),(0,o.kt)("p",null,"So the result of the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {MockFactory} from 'mockingbird-ts';\n\nenum Mood {\n  Happy = 'happy',\n  Numb = 'numb',\n  Sad = 'sad'\n}\n\nclass Person {\n  @Mock({enum: Mood})\n  mood: string;\n}\n\nconst person = MockFactory(Person).one();\nconsole.log(person);\n")),(0,o.kt)("p",null,"Will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  mood: 'happy'\n}\n")),(0,o.kt)("h2",{id:"array-of-classes"},"Array of Classes"),(0,o.kt)("p",null,'Just as it is possible to move a class as a parameter, so it is also possible to pass an "array" of classes:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import {MockFactory} from 'mockingbird-ts';\n\nclass Dog {\n  @Mock()\n  name: string;\n\n  @Mock()\n  points: number;\n}\n\nexport class DogWalker {\n  @Mock({ type: Dog, count: 3 })\n  dogs: Dog[];\n}\n\nconst dogWalker = MockFactory(TestClassWithSingleClass).one();\nconsole.log(dogWalker);\n")),(0,o.kt)("p",null,"Will be:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  dogs: [\n    {...},\n    {...},\n    {...}\n  ]\n}\n")),(0,o.kt)("p",null,"When each object is basically an instance of a dog class and has the properties 'name' and 'points'."))}u.isMDXComponent=!0}}]);