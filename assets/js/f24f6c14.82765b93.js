"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[765],{103:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return k}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],c={sidebar_position:3},l="Mockingbird API \ud83d\udc26",s={unversionedId:"mock-factory",id:"mock-factory",isDocsHomePage:!1,title:"Mockingbird API \ud83d\udc26",description:"Introduction",source:"@site/docs/mock-factory.md",sourceDirName:".",slug:"/mock-factory",permalink:"/mockingbird/docs/mock-factory",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/mock-factory.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Mockingbird API Documentation",permalink:"/mockingbird/docs/mock-decorator"},next:{title:"Mockingbird Recipes",permalink:"/mockingbird/docs/recipes"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"<code>MockFactory</code>",id:"mockfactory",children:[]},{value:"<code>MockBuilder</code>",id:"mockbuilder",children:[{value:"\ud83d\udd75\ufe0f\u200d Discover more about MockBuilder interface",id:"\ufe0f-discover-more-about-mockbuilder-interface",children:[]}]},{value:"API",id:"api",children:[{value:"<code>.one()</code>",id:"one",children:[]},{value:"<code>.many(count: number)</code>",id:"manycount-number",children:[]},{value:"<code>.omit(...keys: string[])</code>",id:"omitkeys-string",children:[]},{value:"<code>.pick(...keys: string[])</code>",id:"pickkeys-string",children:[]},{value:"<code>.mutate()</code>",id:"mutate",children:[]},{value:"<code>.plain()</code>",id:"plain",children:[]},{value:"<code>.setLocale(locale: string)</code>",id:"setlocalelocale-string",children:[]}]}],p={toc:d};function k(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"mockingbird-api-"},"Mockingbird API \ud83d\udc26"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Mockingbird provides a simple way to create mocks (sometimes called fixtures)\nand to apply many variations on them. \\\nThe entry point of Mockingbird is a simple function called ",(0,r.kt)("inlineCode",{parentName:"p"},"MockFactory()"),", which takes\na class as an argument and an optional generic type, for example: ",(0,r.kt)("inlineCode",{parentName:"p"},"MockFactory<Bird>(Bird)"),"."),(0,r.kt)("h2",{id:"mockfactory"},(0,r.kt)("inlineCode",{parentName:"h2"},"MockFactory")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MockFactory")," returns a builder which you can apply some more options on (like ",(0,r.kt)("inlineCode",{parentName:"p"},"mutate")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ignore"),"),\nor just simply create mocks (or single mock)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function MockFactory<TClass>(target: Class<TClass>): MockBuilder<TClass>;\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"Class<TClass>")," is an actual JavaScript class. \\\nReturns ",(0,r.kt)("inlineCode",{parentName:"p"},"MockBuilder")," when invoked."),(0,r.kt)("h2",{id:"mockbuilder"},(0,r.kt)("inlineCode",{parentName:"h2"},"MockBuilder")),(0,r.kt)("p",null,"Consider the following class (we will use it in the following examples of each method):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Mock } from 'mockingbird-ts'; \n\nexport class Bird {\n  @Mock((faker) => faker.random.name())\n  name: string;\n  \n  @Mock(true) // Cause birds are always awesome :)\n  isAwesome: boolean;\n  \n  @Mock()\n  canFly: boolean;\n}\n")),(0,r.kt)("h3",{id:"\ufe0f-discover-more-about-mockbuilder-interface"},"\ud83d\udd75\ufe0f\u200d Discover more about MockBuilder interface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface MockBuilder<TClass = any> {\n  setLocale(locale: string): this;\n  plain(): this;\n  mutate(overrides: OverrideKeys<TClass>): Omit<MockBuilder<TClass>, 'mutate'>;\n  ignore(...keys: IgnoreKeys<TClass>): this;\n  one(): TClass;\n  many(count: number): TClass[];\n}\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"one"},(0,r.kt)("inlineCode",{parentName:"h3"},".one()")),(0,r.kt)("p",null,"Simply creates (and return) a new mock from the class (",(0,r.kt)("inlineCode",{parentName:"p"},"Bird"),"); here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const birdMock = MockFactory<Bird>(Bird).one();\n")),(0,r.kt)("h4",{id:"-hint"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This method can not be chained,\nit just return an mock which is an instance of the class Bird\n")),(0,r.kt)("h3",{id:"manycount-number"},(0,r.kt)("inlineCode",{parentName:"h3"},".many(count: number)")),(0,r.kt)("p",null,"Creates (and return) the required ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," mocks from the class; \\\nhere is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const birdMock = MockFactory<Bird>(Bird).many(3);\n")),(0,r.kt)("h4",{id:"-hint-1"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The .one() method can not be chained,\nit just return an instance of the class\n")),(0,r.kt)("h3",{id:"omitkeys-string"},(0,r.kt)("inlineCode",{parentName:"h3"},".omit(...keys: string[])")),(0,r.kt)("p",null,"Simply ignore some keys in the generated mock."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const birdMock = MockFactory<Bird>(Bird).omit('canFly').one();\n")),(0,r.kt)("h4",{id:"-hint-2"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".ignore() takes as many arguments as you want as long as they are strings\nand they are part of the class properties\n\nBird class has 3 properties: 'name', 'isAwesome' and 'canFly';\nIn the example above will get a mock without the property 'canFly'.\n")),(0,r.kt)("h3",{id:"pickkeys-string"},(0,r.kt)("inlineCode",{parentName:"h3"},".pick(...keys: string[])")),(0,r.kt)("p",null,"Pick specific properties from the class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const birdMock = MockFactory<Bird>(Bird).pick('canFly').one();\n")),(0,r.kt)("h4",{id:"-hint-3"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},".ignore() takes as many arguments as you want as long as they are strings\nand they are part of the class properties\n\nBird class has 3 properties: 'name', 'isAwesome' and 'canFly';\nIn the example above will get a mock without the property 'canFly'.\n")),(0,r.kt)("h3",{id:"mutate"},(0,r.kt)("inlineCode",{parentName:"h3"},".mutate()")),(0,r.kt)("p",null,"Takes an object as an argument which contains keys and values; \\\nIt can also take a callback with faker and return an object, look at the hint \\\nto see an example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const birdMock = MockFactory<Bird>(Bird).mutate({ name: 'Birdy Bird' }).one();\n")),(0,r.kt)("h4",{id:"-hint-4"},"\ud83d\udca1 Hint"),(0,r.kt)("p",null,"Here is a detailed example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const builder = MockFactory<Bird>(Bird).mutate({ name: 'Birdy Bird' });\n\nconst oneBird = builder.one();\nconst manyBirds = builder.many(3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The result will be a mock where the value at the property 'name' will be equal to 'Birdy Bird'\nassert.equal(oneBird.name, 'Birdy Bird')\n\nWhen using 'many', the outcome will be an array of objects with the given mutations\n")),(0,r.kt)("h4",{id:"-hint-using-faker"},"\ud83d\udca1 Hint (using faker)"),(0,r.kt)("p",null,"Here is another example using ",(0,r.kt)("inlineCode",{parentName:"p"},"faker")," and a callback:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const builder = MockFactory<Bird>(Bird).mutate((faker) => ({ name: faker.name.firstName() }));\nconst oneBird = builder.one();\n")),(0,r.kt)("h3",{id:"plain"},(0,r.kt)("inlineCode",{parentName:"h3"},".plain()")),(0,r.kt)("p",null,"Sets the builder to return only plain objects (object literal),\nand not an instance of the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Bird")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Will return a plain object and NOT an instance of the class Bird\nconst birdMock = MockFactory<Bird>(Bird).plain().one();\n")),(0,r.kt)("h4",{id:"-hint-5"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Calling .one() and .many() will return an actual instance of the class (Bird).\nWhen using .plain() you will get an object which is instance of Object\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Using .plain() with .many() will convery all the objects in the array\ninto plain objects\n")),(0,r.kt)("h3",{id:"setlocalelocale-string"},(0,r.kt)("inlineCode",{parentName:"h3"},".setLocale(locale: string)")),(0,r.kt)("p",null,"Sets the locale of the fake data (only apply when you use ",(0,r.kt)("inlineCode",{parentName:"p"},"faker"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const builder = MockFactory<Bird>(Bird).setLocale('es');\n")),(0,r.kt)("h4",{id:"-hint-6"},"\ud83d\udca1 Hint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The method is relevant only when using faker in the @Mock() decorator \ne.g. @Mock((faker) => faker.name.firstName())\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export class Bird {\n  @Mock((faker) => faker.random.name())\n  name: string;\n}\n\nconst bird = MockFactory<Bird>(Bird).setLocale('es').one();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bird.name will be translated into Spanish\n")))}k.isMDXComponent=!0}}]);